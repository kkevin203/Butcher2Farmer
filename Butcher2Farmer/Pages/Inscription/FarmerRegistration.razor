@page "/FarmerRegistration"

@using Database
@using Database.Entities;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity;
@using Models;
@using System.Security.Claims;


@inject ButcherDatabase dbContext
@inject NavigationManager NavigationManager
@inject FarmerService FarmerService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager

<h3>Inscription Agriculteur</h3>

<EditForm Model="@farmers" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="FirstName">Prénom</label>
        <input type="text" id="FirstName" class="form-control" @bind="farmer.FirstName" />
        <ValidationMessage For="@(() => farmer.FirstName)" />
    </div>

    <div class="form-group">
        <label for="Name">Nom de famille</label>
        <input type="text" id="Name" class="form-control" @bind="farmer.Name" />
        <ValidationMessage For="@(() => farmer.Name)" />

    </div>  
    <div class="form-group">
        <label for="Age">Age</label>
        <input type="text" id="Age" class="form-control" @bind="farmer.Age" />
        <ValidationMessage For="@(() => farmer.Age)" />        
    </div>
    <div class="form-group">
        <label for="Adress">Adresse</label>
        <input type="text" id="Adress" class="form-control" @bind="farmer.Adress" />
        <ValidationMessage For="@(() => farmer.Adress)" />

    </div> 
    <div class="form-group">
        <label for="Tel">Tel</label>
        <input type="text" id="Tel" class="form-control" @bind="farmer.Tel" />
        <ValidationMessage For="@(() => farmer.Tel)" />

    </div>
    <div class="form-group">
        <label for="Email">Email</label>
        <input type="text" id="Email" class="form-control" @bind="farmer.Email" />
        <ValidationMessage For="@(() => farmer.Email)" />

    </div>
    <div class="form-group">
        <label for="Adress">Certifications</label>
        <input type="text" id="Certifications" class="form-control" @bind="farmer.Certifications" />
        <ValidationMessage For="@(() => farmer.Certifications)" />

    </div> 
    <div class="form-group">
        <label for="AnimalType">AnimalType</label>
        <input type="text" id="AnimalType" class="form-control" @bind="farmer.AnimalType" />
        <ValidationMessage For="@(() => farmer.AnimalType)" />

    </div>
    <div class="form-group">
        <label for="farmerSize">farmerSize</label>
        <input type="text" id="farmerSize" class="form-control" @bind="farmer.farmerSize" />
        <ValidationMessage For="@(() => farmer.farmerSize)" />

    </div>


    <button type="submit" class="btn btn-primary">S'inscrire</button>
</EditForm>


@code {
    private Farmer farmer = new Farmer();
    private List<Database.Entities.Farmer> farmers = new();
    private List<Database.Entities.Farmer> filteredFarmers = new List<Database.Entities.Farmer>();
    private string errorMessage = null;

    private bool isSubmitted = false;


    private async Task HandleSubmit()
    {
        try
        {
            await FarmerService.CreateFarmerAsync(farmer);
            isSubmitted = true;

            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;

            if (user != null)
            {
                var newUser = new User
                    {
                        Email = user.FindFirst(ClaimTypes.Email)?.Value,
                    };

                var result = await UserManager.CreateAsync(newUser);

                if (result.Succeeded)
                {
                    NavigationManager.NavigateTo("/addanimal");
                }
                else
                {
                    errorMessage = "Erreur lors de la création de l'utilisateur.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Une erreur s'est produite : " + ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        farmers = await FarmerService.GetFarmersAsync();
    }


}

    

    


